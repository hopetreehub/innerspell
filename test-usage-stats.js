const { chromium } = require('playwright');

async function captureScreenshot(page, name) {
  await page.screenshot({ 
    path: `screenshots/usage-stats-test-${name}.png`,
    fullPage: true
  });
  console.log(`üì∏ Screenshot captured: usage-stats-test-${name}.png`);
}

async function testUsageStats() {
  let browser;
  let page;
  
  try {
    browser = await chromium.launch({ headless: false });
    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 }
    });
    page = await context.newPage();
    
    // Step 1: ÌÉÄÎ°ú Î¶¨Îî© ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    console.log('üåê Navigating to http://localhost:4000/reading...');
    await page.goto('http://localhost:4000/reading');
    await page.waitForLoadState('networkidle');
    
    await captureScreenshot(page, '01-reading-page');
    
    // Step 2: ÏßàÎ¨∏ ÏûÖÎ†•
    console.log('üìù Entering question...');
    await page.fill('textarea[placeholder*="ÏßàÎ¨∏"]', 'Ïò§ÎäòÏùò Ïö¥ÏÑ∏Îäî Ïñ¥Îñ®ÍπåÏöî?');
    
    // Step 3: Ïπ¥Îìú ÏÖîÌîå
    console.log('üé¥ Shuffling cards...');
    const shuffleButton = await page.$('button:has-text("Ïπ¥Îìú ÏÑûÍ∏∞")');
    if (shuffleButton) {
      await shuffleButton.click();
      await page.waitForTimeout(3000);
    }
    
    // Step 4: Ïä§ÌîÑÎ†àÎìúÏóêÏÑú Ïπ¥Îìú ÏÑ†ÌÉù
    console.log('üÉè Selecting cards...');
    const spreadCards = await page.$$('[alt="Ïπ¥Îìú Îí∑Î©¥"]');
    if (spreadCards.length >= 3) {
      // 3Ïû• ÏÑ†ÌÉù
      for (let i = 0; i < 3; i++) {
        await spreadCards[i].click();
        await page.waitForTimeout(500);
      }
    }
    
    await captureScreenshot(page, '02-cards-selected');
    
    // Step 5: Ìï¥ÏÑù ÏöîÏ≤≠
    console.log('üîÆ Requesting interpretation...');
    const interpretButton = await page.$('button:has-text("AI Ìï¥ÏÑù Î∞õÍ∏∞")');
    if (interpretButton) {
      await interpretButton.click();
      console.log('‚úÖ Tarot reading activity should be recorded!');
      await page.waitForTimeout(3000);
    }
    
    // Step 6: Î∏îÎ°úÍ∑∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    console.log('üìö Navigating to blog...');
    await page.goto('http://localhost:4000/blog');
    await page.waitForLoadState('networkidle');
    
    // Step 7: Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÌÅ¥Î¶≠
    console.log('üìñ Clicking blog post...');
    const firstPost = await page.$('article a');
    if (firstPost) {
      await firstPost.click();
      await page.waitForLoadState('networkidle');
      console.log('‚úÖ Blog view activity should be recorded!');
      await captureScreenshot(page, '03-blog-post-view');
    }
    
    // Step 8: Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    console.log('üë§ Navigating to admin page...');
    await page.goto('http://localhost:4000/admin');
    await page.waitForLoadState('networkidle');
    
    // Step 9: ÏÇ¨Ïö©ÌÜµÍ≥Ñ ÌÉ≠ ÌÅ¥Î¶≠
    console.log('üìä Clicking usage stats tab...');
    await page.click('[role="tab"]:has-text("ÏÇ¨Ïö©ÌÜµÍ≥Ñ")');
    await page.waitForTimeout(3000);
    
    await captureScreenshot(page, '04-usage-stats');
    
    // Step 10: Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÌÉ≠ ÌÅ¥Î¶≠
    console.log('üìà Clicking real-time monitoring tab...');
    await page.click('[role="tab"]:has-text("Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ")');
    await page.waitForTimeout(2000);
    
    await captureScreenshot(page, '05-realtime-monitoring');
    
    // Step 11: Îç∞Ïù¥ÌÑ∞ ÌååÏùº ÌôïÏù∏
    console.log('\nüìÅ Checking data files...');
    const fs = require('fs');
    const path = require('path');
    
    // ÏÇ¨Ïö© ÌÜµÍ≥Ñ ÌååÏùº ÌôïÏù∏
    const statsPath = path.join(process.cwd(), 'data', 'usage-stats.json');
    if (fs.existsSync(statsPath)) {
      const statsData = JSON.parse(fs.readFileSync(statsPath, 'utf-8'));
      console.log('‚úÖ Usage stats file exists!');
      console.log(`   Total Users: ${statsData.stats.totalUsers}`);
      console.log(`   Total Sessions: ${statsData.stats.totalSessions}`);
      console.log(`   Total Readings: ${statsData.stats.totalReadings}`);
      console.log(`   Active Users: ${statsData.stats.activeUsers}`);
      console.log(`   Last Updated: ${statsData.lastUpdated}`);
    } else {
      console.log('‚ùå Usage stats file not found');
    }
    
    // ÏÇ¨Ïö©Ïûê ÌôúÎèô ÌååÏùº ÌôïÏù∏
    const activitiesPath = path.join(process.cwd(), 'data', 'user-activities.json');
    if (fs.existsSync(activitiesPath)) {
      const activitiesData = JSON.parse(fs.readFileSync(activitiesPath, 'utf-8'));
      console.log('\n‚úÖ User activities file exists!');
      console.log(`   Total Activities: ${activitiesData.activities.length}`);
      
      if (activitiesData.activities.length > 0) {
        console.log('\n   Recent Activities:');
        activitiesData.activities.slice(0, 5).forEach(activity => {
          console.log(`   - ${activity.action} by ${activity.userId} at ${activity.timestamp}`);
          if (activity.details) {
            console.log(`     Details: ${JSON.stringify(activity.details)}`);
          }
        });
      }
    } else {
      console.log('‚ùå User activities file not found');
    }
    
    console.log('\n‚úÖ Usage stats test completed!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    
    if (page) {
      await captureScreenshot(page, 'error-state');
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Run the test
testUsageStats();