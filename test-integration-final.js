const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

async function testIntegration() {
  let browser;
  let page;
  
  try {
    browser = await chromium.launch({ headless: false });
    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 }
    });
    page = await context.newPage();
    
    console.log('üöÄ Starting Integration Test with File Storage...\n');
    
    // Step 1: ÌôàÌéòÏù¥ÏßÄ Î∞©Î¨∏
    console.log('üìç Step 1: Homepage Visit');
    await page.goto('http://localhost:4000');
    await page.waitForLoadState('networkidle');
    console.log('‚úÖ Homepage loaded');
    
    // Step 2: Î∏îÎ°úÍ∑∏ ÌéòÏù¥ÏßÄ ÌôïÏù∏
    console.log('\nüìç Step 2: Blog Test');
    await page.goto('http://localhost:4000/blog');
    await page.waitForLoadState('networkidle');
    
    // Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÌôïÏù∏
    const blogPosts = await page.$$('article');
    console.log(`‚úÖ Found ${blogPosts.length} blog posts`);
    
    if (blogPosts.length > 0) {
      // Ï≤´ Î≤àÏß∏ Ìè¨Ïä§Ìä∏ ÌÅ¥Î¶≠
      await blogPosts[0].click();
      await page.waitForLoadState('networkidle');
      console.log('‚úÖ Blog post view recorded');
      await page.goBack();
    }
    
    // Step 3: ÌÉÄÎ°ú Î¶¨Îî© ÌÖåÏä§Ìä∏
    console.log('\nüìç Step 3: Tarot Reading Test');
    await page.goto('http://localhost:4000/reading');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000);
    
    // ÌÉÄÎ°ú Î¶¨Îî© ÏãúÎèÑ
    const questionInput = await page.$('textarea');
    if (questionInput) {
      await questionInput.fill('Ïò§ÎäòÏùò Ïö¥ÏÑ∏Î•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî');
      console.log('‚úÖ Question entered');
      
      // Ïä§ÌîÑÎ†àÎìú ÏÑ†ÌÉù (3Ïπ¥Îìú)
      const threeCardSpread = await page.$('text=3 Ïπ¥Îìú');
      if (threeCardSpread) {
        await threeCardSpread.click();
        await page.waitForTimeout(1000);
        
        // Ïπ¥Îìú ÏÖîÌîå
        const shuffleButton = await page.$('button:has-text("Ïπ¥Îìú ÏÑûÍ∏∞")');
        if (shuffleButton) {
          await shuffleButton.click();
          console.log('‚úÖ Cards shuffled');
          await page.waitForTimeout(2000);
        }
      }
    }
    
    // Step 4: Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú - Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ
    console.log('\nüìç Step 4: Admin Dashboard - Real-time Monitoring');
    await page.goto('http://localhost:4000/admin');
    await page.waitForLoadState('networkidle');
    
    // Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÌÉ≠
    const monitoringTab = await page.$('[role="tab"]:has-text("Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ")');
    if (monitoringTab) {
      await monitoringTab.click();
      await page.waitForTimeout(3000);
      
      // ÌÜµÍ≥Ñ ÌôïÏù∏
      const activeUsersElement = await page.$('text=ÌôúÏÑ± ÏÇ¨Ïö©Ïûê >> xpath=../.. >> .text-2xl');
      const activeSessionsElement = await page.$('text=ÌôúÏÑ± ÏÑ∏ÏÖò >> xpath=../.. >> .text-2xl');
      const todayReadingsElement = await page.$('text=Ïò§Îäò Î¶¨Îî© >> xpath=../.. >> .text-2xl');
      
      if (activeUsersElement) {
        const activeUsers = await activeUsersElement.textContent();
        console.log(`‚úÖ Active Users: ${activeUsers}`);
      }
      
      if (activeSessionsElement) {
        const activeSessions = await activeSessionsElement.textContent();
        console.log(`‚úÖ Active Sessions: ${activeSessions}`);
      }
      
      if (todayReadingsElement) {
        const todayReadings = await todayReadingsElement.textContent();
        console.log(`‚úÖ Today Readings: ${todayReadings}`);
      }
      
      // ÌååÏùº Ï†ÄÏû•ÏÜå ÏÉÅÌÉú ÌôïÏù∏
      const fileStorageInfo = await page.$('text=ÌååÏùº Ï†ÄÏû•ÏÜå ÌôúÏÑ±Ìôî');
      if (fileStorageInfo) {
        console.log('‚úÖ File storage is enabled');
      }
      
      await page.screenshot({ 
        path: 'screenshots/integration-1-monitoring.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot: integration-1-monitoring.png');
    }
    
    // Step 5: ÏÇ¨Ïö© ÌÜµÍ≥Ñ ÌÉ≠
    console.log('\nüìç Step 5: Usage Statistics Tab');
    const usageStatsTab = await page.$('[role="tab"]:has-text("ÏÇ¨Ïö©ÌÜµÍ≥Ñ")');
    if (usageStatsTab) {
      await usageStatsTab.click();
      await page.waitForTimeout(3000);
      
      // Ï¥ù ÏÇ¨Ïö©Ïûê Ïàò ÌôïÏù∏
      const totalUsersElement = await page.$('text=Ï¥ù ÏÇ¨Ïö©Ïûê >> xpath=../.. >> .text-2xl');
      if (totalUsersElement) {
        const totalUsers = await totalUsersElement.textContent();
        console.log(`‚úÖ Total Users: ${totalUsers}`);
      }
      
      await page.screenshot({ 
        path: 'screenshots/integration-2-usage-stats.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot: integration-2-usage-stats.png');
    }
    
    // Step 6: Î∏îÎ°úÍ∑∏ Í¥ÄÎ¶¨ ÌÉ≠
    console.log('\nüìç Step 6: Blog Management Tab');
    const blogTab = await page.$('[role="tab"]:has-text("Î∏îÎ°úÍ∑∏Í¥ÄÎ¶¨")');
    if (blogTab) {
      await blogTab.click();
      await page.waitForTimeout(2000);
      
      // Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Î™©Î°ù ÌôïÏù∏
      const postRows = await page.$$('tbody tr');
      console.log(`‚úÖ Found ${postRows.length} blog posts in admin`);
      
      // ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ± Î≤ÑÌäº ÌôïÏù∏
      const newPostButton = await page.$('button:has-text("ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ±")');
      if (newPostButton) {
        console.log('‚úÖ New post button available');
      }
      
      await page.screenshot({ 
        path: 'screenshots/integration-3-blog-management.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot: integration-3-blog-management.png');
    }
    
    // Step 7: Îç∞Ïù¥ÌÑ∞ ÌååÏùº Í≤ÄÏ¶ù
    console.log('\nüìç Step 7: Data Files Verification');
    const dataDir = path.join(process.cwd(), 'data');
    
    // Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ ÌååÏùº
    const blogPostsPath = path.join(dataDir, 'blog-posts.json');
    if (fs.existsSync(blogPostsPath)) {
      const blogData = JSON.parse(fs.readFileSync(blogPostsPath, 'utf-8'));
      console.log(`‚úÖ Blog posts file: ${blogData.posts.length} posts`);
      console.log(`   Last updated: ${blogData.lastUpdated}`);
    }
    
    // ÏÇ¨Ïö© ÌÜµÍ≥Ñ ÌååÏùº
    const usageStatsPath = path.join(dataDir, 'usage-stats.json');
    if (fs.existsSync(usageStatsPath)) {
      const statsData = JSON.parse(fs.readFileSync(usageStatsPath, 'utf-8'));
      console.log(`‚úÖ Usage stats file:`);
      console.log(`   Total users: ${statsData.stats.totalUsers}`);
      console.log(`   Total readings: ${statsData.stats.totalReadings}`);
      console.log(`   Daily stats: ${statsData.dailyStats.length} days`);
    }
    
    // ÏÇ¨Ïö©Ïûê ÌôúÎèô ÌååÏùº
    const activitiesPath = path.join(dataDir, 'user-activities.json');
    if (fs.existsSync(activitiesPath)) {
      const activitiesData = JSON.parse(fs.readFileSync(activitiesPath, 'utf-8'));
      console.log(`‚úÖ User activities file: ${activitiesData.activities.length} activities`);
    }
    
    // Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
    const backupDir = path.join(dataDir, 'backups');
    if (fs.existsSync(backupDir)) {
      const backupFiles = fs.readdirSync(backupDir);
      console.log(`‚úÖ Backup directory: ${backupFiles.length} backup files`);
    }
    
    // Step 8: ÏÑ±Îä• ÌÖåÏä§Ìä∏
    console.log('\nüìç Step 8: Performance Test');
    
    // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÌÖåÏä§Ìä∏
    console.log('‚è±Ô∏è Testing auto-refresh (5 seconds)...');
    await page.goto('http://localhost:4000/admin');
    const monitoringTab2 = await page.$('[role="tab"]:has-text("Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ")');
    if (monitoringTab2) {
      await monitoringTab2.click();
      
      // Ï¥àÍ∏∞Í∞í Í∏∞Î°ù
      const initialValue = await page.$eval('text=ÌôúÏÑ± ÏÇ¨Ïö©Ïûê >> xpath=../.. >> .text-2xl', el => el.textContent);
      
      // 6Ï¥à ÎåÄÍ∏∞ (5Ï¥à ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®)
      await page.waitForTimeout(6000);
      
      // Î≥ÄÍ≤Ω ÌôïÏù∏
      const newValue = await page.$eval('text=ÌôúÏÑ± ÏÇ¨Ïö©Ïûê >> xpath=../.. >> .text-2xl', el => el.textContent);
      
      if (initialValue !== newValue) {
        console.log('‚úÖ Auto-refresh is working');
      } else {
        console.log('‚ö†Ô∏è Auto-refresh may not be working');
      }
    }
    
    console.log('\n‚úÖ Integration test completed successfully!');
    console.log('\nüìä Summary:');
    console.log('   - File storage: Enabled');
    console.log('   - Data persistence: Working');
    console.log('   - Real-time monitoring: Active');
    console.log('   - Blog CRUD: Functional');
    console.log('   - Usage statistics: Collecting');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    
    if (page) {
      await page.screenshot({ 
        path: 'screenshots/integration-error.png',
        fullPage: true
      });
      console.log('üì∏ Error screenshot captured');
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Run the test
testIntegration();