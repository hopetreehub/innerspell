const { chromium } = require('playwright');

async function captureScreenshot(page, name) {
  await page.screenshot({ 
    path: `screenshots/file-storage-test-${name}.png`,
    fullPage: true
  });
  console.log(`üì∏ Screenshot captured: file-storage-test-${name}.png`);
}

async function testBlogFileStorage() {
  let browser;
  let page;
  
  try {
    browser = await chromium.launch({ headless: false });
    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 }
    });
    page = await context.newPage();
    
    console.log('üåê Navigating to http://localhost:4000/admin...');
    await page.goto('http://localhost:4000/admin');
    await page.waitForLoadState('networkidle');
    
    // Step 1: Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ Î°úÎìú ÌôïÏù∏
    await captureScreenshot(page, '01-admin-loaded');
    
    // Step 2: Î∏îÎ°úÍ∑∏ Í¥ÄÎ¶¨ ÌÉ≠ ÌÅ¥Î¶≠
    console.log('üìö Clicking blog management tab...');
    await page.click('[role="tab"]:has-text("Î∏îÎ°úÍ∑∏ Í¥ÄÎ¶¨")');
    await page.waitForTimeout(2000);
    await captureScreenshot(page, '02-blog-tab-clicked');
    
    // Step 3: Í∏∞Ï°¥ Ìè¨Ïä§Ìä∏ Î™©Î°ù ÌôïÏù∏ (ÌååÏùºÏóêÏÑú Î°úÎìúÎêòÎäîÏßÄ)
    console.log('üìã Checking existing posts loaded from file storage...');
    
    // Ìè¨Ïä§Ìä∏Í∞Ä Î°úÎìúÎê† ÎïåÍπåÏßÄ Í∏∞Îã§Î¶¨Í∏∞
    await page.waitForTimeout(3000);
    
    // Ìè¨Ïä§Ìä∏ Ïπ¥Îìú ÌôïÏù∏
    const postCards = await page.$$('[role="article"]');
    console.log(`‚úÖ Found ${postCards.length} existing blog posts`);
    
    // Ìè¨Ïä§Ìä∏Í∞Ä ÌëúÏãúÎêòÏßÄ ÏïäÏúºÎ©¥ ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ± Î≤ÑÌäºÎèÑ ÏóÜÏùÑ Ïàò ÏûàÏùå
    // Î∏îÎ°úÍ∑∏ Í¥ÄÎ¶¨ UI Íµ¨Ï°∞ ÌôïÏù∏
    const hasNewPostButton = await page.$('button:has-text("ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ±")');
    
    if (!hasNewPostButton) {
      console.log('‚ö†Ô∏è "ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ±" Î≤ÑÌäºÏù¥ ÏóÜÏäµÎãàÎã§. UI Íµ¨Ï°∞ ÌôïÏù∏ Ï§ë...');
      
      // Ìè¨Ïä§Ìä∏ Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÏùÑ ÎïåÏùò UI ÌôïÏù∏
      const emptyState = await page.$('text="ÏïÑÏßÅ ÏûëÏÑ±Îêú Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§"');
      if (emptyState) {
        console.log('üì≠ Ìè¨Ïä§Ìä∏ Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.');
      }
      
      // ÌîåÎ°úÌåÖ Î≤ÑÌäº ÎòêÎäî Îã§Î•∏ ÌòïÌÉúÏùò Ï∂îÍ∞Ä Î≤ÑÌäº Ï∞æÍ∏∞
      const addButton = await page.$('button[aria-label*="Ï∂îÍ∞Ä"], button[aria-label*="ÏÉà"], button[aria-label*="ÏûëÏÑ±"], button:has-text("+")');
      if (addButton) {
        console.log('‚ûï ÎåÄÏ≤¥ Ï∂îÍ∞Ä Î≤ÑÌäºÏùÑ Ï∞æÏïòÏäµÎãàÎã§.');
        await addButton.click();
        await page.waitForTimeout(2000);
        await captureScreenshot(page, '03-new-post-modal');
      } else {
        console.log('‚ùå ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ± Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }
    } else {
      // Step 4: ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ± Î≤ÑÌäº ÌÅ¥Î¶≠
      console.log('‚ûï Opening new post modal...');
      await page.click('button:has-text("ÏÉà Ìè¨Ïä§Ìä∏ ÏûëÏÑ±")');
      await page.waitForTimeout(2000);
      await captureScreenshot(page, '03-new-post-modal');
    }
    
    // Step 5: Ìè¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•
    console.log('üìù Filling in post data...');
    const timestamp = Date.now();
    const postTitle = `ÌååÏùº Ï†ÄÏû•ÏÜå ÌÖåÏä§Ìä∏ Ìè¨Ïä§Ìä∏ ${timestamp}`;
    
    await page.fill('input[placeholder*="Ï†úÎ™©"]', postTitle);
    await page.fill('textarea[placeholder*="ÏöîÏïΩ"]', 'ÌååÏùº ÏãúÏä§ÌÖú Ï†ÄÏû•ÏÜåÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏûëÎèôÌïòÎäîÏßÄ ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§.');
    
    // Î≥∏Î¨∏ ÏóêÎîîÌÑ∞ (contenteditable)
    const contentEditor = await page.$('.tiptap.ProseMirror, [contenteditable="true"]');
    if (contentEditor) {
      await contentEditor.click();
      await page.keyboard.type('# ÌååÏùº Ï†ÄÏû•ÏÜå ÌÖåÏä§Ìä∏\n\nÏù¥ Ìè¨Ïä§Ìä∏Îäî ÌååÏùº ÏãúÏä§ÌÖú Ï†ÄÏû•ÏÜåÏóê Ï†ÄÏû•Îê©ÎãàÎã§.\n\n## ÌäπÏßï\n- ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë ÌõÑÏóêÎèÑ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ\n- ÏûêÎèô Î∞±ÏóÖ ÏÉùÏÑ±\n- Îπ†Î•∏ ÏùΩÍ∏∞/Ïì∞Í∏∞ ÏÑ±Îä•');
    }
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù
    const categoryButton = await page.$('button[role="combobox"]');
    if (categoryButton) {
      await categoryButton.click();
      await page.waitForTimeout(500);
      const dreamOption = await page.$('[role="option"]:has-text("dream")');
      if (dreamOption) {
        await dreamOption.click();
      }
    }
    
    // ÌÉúÍ∑∏ ÏûÖÎ†•
    const tagInput = await page.$('input[placeholder*="ÌÉúÍ∑∏"]');
    if (tagInput) {
      await tagInput.fill('ÌååÏùºÏ†ÄÏû•ÏÜå');
      await tagInput.press('Enter');
      await tagInput.fill('ÌÖåÏä§Ìä∏');
      await tagInput.press('Enter');
    }
    
    // Í≤åÏãú ÏÉÅÌÉú ÏÑ§Ï†ï
    const publishSwitch = await page.$('button[role="switch"], input[type="checkbox"]');
    if (publishSwitch) {
      await publishSwitch.click();
      console.log('‚úÖ Í≤åÏãú ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï');
    }
    
    await captureScreenshot(page, '04-form-filled');
    
    // Step 6: Ï†ÄÏû• Î≤ÑÌäº ÌÅ¥Î¶≠
    console.log('üíæ Saving post to file storage...');
    await page.click('button:has-text("Ï†ÄÏû•")');
    await page.waitForTimeout(3000);
    
    // Step 7: Ï†ÄÏû• ÌõÑ Ìè¨Ïä§Ìä∏ Î™©Î°ù ÌôïÏù∏
    console.log('üîç Verifying post was saved...');
    await captureScreenshot(page, '05-after-save');
    
    // ÏÉàÎ°úÏö¥ Ìè¨Ïä§Ìä∏Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    const newPostCards = await page.$$('[role="article"]');
    console.log(`‚úÖ Post count after save: ${newPostCards.length}`);
    
    // Ï†ÄÏû•Îêú Ìè¨Ïä§Ìä∏ Ï∞æÍ∏∞
    const savedPost = await page.$(`text="${postTitle}"`);
    if (savedPost) {
      console.log('‚úÖ New post found in the list!');
    } else {
      console.log('‚ö†Ô∏è New post not immediately visible, checking for refresh...');
      
      // ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ® ÌõÑ ÌôïÏù∏
      await page.reload();
      await page.waitForLoadState('networkidle');
      await page.click('[role="tab"]:has-text("Î∏îÎ°úÍ∑∏ Í¥ÄÎ¶¨")');
      await page.waitForTimeout(2000);
      
      const savedPostAfterRefresh = await page.$(`text="${postTitle}"`);
      if (savedPostAfterRefresh) {
        console.log('‚úÖ New post found after refresh!');
      }
    }
    
    // Step 8: Îç∞Ïù¥ÌÑ∞ ÌååÏùº ÌôïÏù∏
    console.log('\nüìÅ Checking data file...');
    const fs = require('fs');
    const path = require('path');
    const dataPath = path.join(process.cwd(), 'data', 'blog-posts.json');
    
    if (fs.existsSync(dataPath)) {
      const data = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));
      console.log(`‚úÖ Data file exists with ${data.posts.length} posts`);
      console.log(`üìÖ Last updated: ${data.lastUpdated}`);
      
      // Î∞©Í∏à Ï†ÄÏû•Ìïú Ìè¨Ïä§Ìä∏ ÌôïÏù∏
      const recentPost = data.posts.find(p => p.title === postTitle);
      if (recentPost) {
        console.log('‚úÖ Recently saved post found in data file!');
        console.log(`   ID: ${recentPost.id}`);
        console.log(`   Title: ${recentPost.title}`);
        console.log(`   Category: ${recentPost.category}`);
        console.log(`   Tags: ${recentPost.tags.join(', ')}`);
        console.log(`   Published: ${recentPost.published}`);
      }
    } else {
      console.log('‚ùå Data file not found');
    }
    
    // Step 9: Î∞±ÏóÖ ÌååÏùº ÌôïÏù∏
    const backupPath = path.join(process.cwd(), 'data', 'backups');
    if (fs.existsSync(backupPath)) {
      const backups = fs.readdirSync(backupPath).filter(f => f.startsWith('blog-posts_'));
      console.log(`\nüì¶ Found ${backups.length} backup files`);
      if (backups.length > 0) {
        console.log('   Latest backups:');
        backups.slice(0, 3).forEach(b => console.log(`   - ${b}`));
      }
    }
    
    console.log('\n‚úÖ File storage test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    
    if (page) {
      await captureScreenshot(page, 'error-state');
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Run the test
testBlogFileStorage();