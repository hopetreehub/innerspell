name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - production
          - staging
      deployment_url:
        description: 'Specific deployment URL to rollback to (optional)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  rollback:
    name: Rollback ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}-rollback
    steps:
      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Get deployment history
        id: history
        run: |
          echo "üîç Fetching deployment history for ${{ github.event.inputs.environment }}..."
          
          # Get deployment list
          DEPLOYMENTS=$(vercel list --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --json)
          
          # Filter by environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            TARGET="production"
          else
            TARGET="preview"
          fi
          
          # Get recent successful deployments
          echo "Recent successful deployments:"
          echo "$DEPLOYMENTS" | jq -r --arg target "$TARGET" '.deployments[] | select(.state == "READY" and .target == $target) | "\(.created|strftime("%Y-%m-%d %H:%M:%S")) - https://\(.url)"' | head -10

      - name: Determine rollback target
        id: target
        run: |
          if [ -n "${{ github.event.inputs.deployment_url }}" ]; then
            # Use specified deployment
            ROLLBACK_URL="${{ github.event.inputs.deployment_url }}"
            echo "Using specified deployment: $ROLLBACK_URL"
          else
            # Get the second most recent deployment (previous stable)
            DEPLOYMENTS=$(vercel list --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --json)
            
            if [ "${{ github.event.inputs.environment }}" = "production" ]; then
              TARGET="production"
            else
              TARGET="preview"
            fi
            
            ROLLBACK_URL=$(echo "$DEPLOYMENTS" | jq -r --arg target "$TARGET" '.deployments[] | select(.state == "READY" and .target == $target) | .url' | sed -n '2p')
            
            if [ -z "$ROLLBACK_URL" ]; then
              echo "‚ùå No previous deployment found for rollback!"
              exit 1
            fi
            
            ROLLBACK_URL="https://$ROLLBACK_URL"
          fi
          
          echo "rollback_url=$ROLLBACK_URL" >> $GITHUB_OUTPUT
          echo "üéØ Rollback target: $ROLLBACK_URL"

      - name: Validate rollback target
        run: |
          echo "üîç Validating rollback target..."
          
          # Check if deployment is accessible
          HTTP_STATUS=$(curl -o /dev/null -s -w '%{http_code}' "${{ steps.target.outputs.rollback_url }}")
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ùå Rollback target is not accessible (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
          # Check health endpoint
          API_HEALTH=$(curl -s "${{ steps.target.outputs.rollback_url }}/api/health" | jq -r '.status' || echo "failed")
          
          if [ "$API_HEALTH" != "healthy" ]; then
            echo "‚ö†Ô∏è Warning: Rollback target health check failed"
            echo "Proceeding anyway due to emergency rollback..."
          else
            echo "‚úÖ Rollback target is healthy"
          fi

      - name: Execute rollback
        id: rollback
        run: |
          echo "üîÑ Executing rollback..."
          
          ROLLBACK_URL="${{ steps.target.outputs.rollback_url }}"
          
          # Extract deployment ID from URL
          DEPLOYMENT_ID=$(echo "$ROLLBACK_URL" | sed 's/https:\/\///' | cut -d'.' -f1)
          
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "Rolling back production to: $DEPLOYMENT_ID"
            vercel promote "$DEPLOYMENT_ID" --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
          else
            echo "Rolling back staging to: $DEPLOYMENT_ID"
            vercel alias set "$DEPLOYMENT_ID" staging-${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
          fi
          
          echo "‚úÖ Rollback completed successfully!"

      - name: Verify rollback
        run: |
          echo "üîç Verifying rollback..."
          
          # Wait for changes to propagate
          sleep 10
          
          # Check the environment URL
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            CHECK_URL="https://${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app"
          else
            CHECK_URL="https://staging-${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app"
          fi
          
          HTTP_STATUS=$(curl -o /dev/null -s -w '%{http_code}' "$CHECK_URL")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Rollback verified - site is accessible"
          else
            echo "‚ö†Ô∏è Warning: Site returned HTTP $HTTP_STATUS after rollback"
          fi

      - name: Create rollback record
        uses: actions/github-script@v7
        with:
          script: |
            // Create an issue to document the rollback
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Emergency Rollback: ${{ github.event.inputs.environment }} - ${new Date().toISOString().split('T')[0]}`,
              body: `## Rollback Information
              
              **Environment:** ${{ github.event.inputs.environment }}
              **Initiated by:** @${{ github.actor }}
              **Reason:** ${{ github.event.inputs.reason }}
              **Rollback to:** ${{ steps.target.outputs.rollback_url }}
              **Timestamp:** ${new Date().toISOString()}
              
              ### Actions Required
              - [ ] Investigate root cause
              - [ ] Fix identified issues
              - [ ] Test fixes in staging
              - [ ] Plan re-deployment
              
              ### Related Information
              - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `,
              labels: ['rollback', 'incident', '${{ github.event.inputs.environment }}']
            });
            
            console.log(`Created rollback issue: ${issue.data.html_url}`);

      - name: Send rollback notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          EMOJI="üîÑ"
          COLOR="16776960"  # Yellow
          
          if [ "$STATUS" = "success" ]; then
            STATUS_TEXT="completed successfully"
            EMOJI="‚úÖ"
            COLOR="3066993"  # Green
          else
            STATUS_TEXT="failed"
            EMOJI="‚ùå"
            COLOR="15158332"  # Red
          fi
          
          # Send Slack notification if webhook is configured
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              -d '{
                "text": "'"$EMOJI"' Emergency Rollback '"$STATUS_TEXT"'",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "'"$EMOJI"' Emergency Rollback"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Environment:*\n${{ github.event.inputs.environment }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Status:*\n'"$STATUS_TEXT"'"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Initiated by:*\n${{ github.actor }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Reason:*\n${{ github.event.inputs.reason }}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Rolled back to:*\n${{ steps.target.outputs.rollback_url }}"
                    }
                  }
                ]
              }'
          fi