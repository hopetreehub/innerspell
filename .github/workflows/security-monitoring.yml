name: Security Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --json > npm-audit.json || true
          
      - name: Check for critical vulnerabilities
        run: |
          if [ -f npm-audit.json ]; then
            critical_count=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            high_count=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
            
            echo "Critical vulnerabilities: $critical_count"
            echo "High vulnerabilities: $high_count"
            
            if [ "$critical_count" -gt 0 ]; then
              echo "‚ùå Critical vulnerabilities found!"
              npm audit
              exit 1
            fi
            
            if [ "$high_count" -gt 5 ]; then
              echo "‚ö†Ô∏è Too many high vulnerabilities found!"
              npm audit
            fi
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: npm-audit.json

  codeql-analysis:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  secret-scanning:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-headers-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security headers configuration
        run: |
          echo "Checking for security headers in next.config.ts..."
          
          required_headers=(
            "X-Frame-Options"
            "X-Content-Type-Options"
            "X-XSS-Protection"
            "Strict-Transport-Security"
            "Content-Security-Policy"
            "Permissions-Policy"
            "Referrer-Policy"
          )
          
          missing_headers=()
          
          for header in "${required_headers[@]}"; do
            if ! grep -q "$header" next.config.ts; then
              missing_headers+=("$header")
            fi
          done
          
          if [ ${#missing_headers[@]} -eq 0 ]; then
            echo "‚úÖ All required security headers are configured"
          else
            echo "‚ùå Missing security headers:"
            printf '%s\n' "${missing_headers[@]}"
            exit 1
          fi

  firebase-rules-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Firebase tools
        run: npm install -g firebase-tools

      - name: Check Firestore rules
        run: |
          if [ -f firestore.rules ]; then
            echo "Analyzing Firestore security rules..."
            
            # Check for overly permissive rules
            if grep -E "allow (read|write).*:.*true" firestore.rules; then
              echo "‚ö†Ô∏è Warning: Found potentially overly permissive rules"
            fi
            
            # Check for authentication requirements
            if ! grep -q "request.auth != null" firestore.rules; then
              echo "‚ö†Ô∏è Warning: No authentication checks found in rules"
            fi
          else
            echo "‚ö†Ô∏è No firestore.rules file found"
          fi

  compliance-report:
    needs: [dependency-check, codeql-analysis, secret-scanning, security-headers-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report" > compliance-report.md
          echo "" >> compliance-report.md
          echo "Generated: $(date -u)" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## Scan Results" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> compliance-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> compliance-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> compliance-report.md
          echo "- Security Headers: ${{ needs.security-headers-check.result }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          if [ "${{ needs.dependency-check.result }}" != "success" ] || \
             [ "${{ needs.codeql-analysis.result }}" != "success" ] || \
             [ "${{ needs.secret-scanning.result }}" != "success" ] || \
             [ "${{ needs.security-headers-check.result }}" != "success" ]; then
            echo "## ‚ùå Compliance Status: FAILED" >> compliance-report.md
            echo "" >> compliance-report.md
            echo "One or more security checks failed. Please review the individual job results." >> compliance-report.md
          else
            echo "## ‚úÖ Compliance Status: PASSED" >> compliance-report.md
            echo "" >> compliance-report.md
            echo "All security checks passed successfully." >> compliance-report.md
          fi

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: compliance-report.md

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const compliance = `${{ needs.dependency-check.result }}` === 'success' &&
                            `${{ needs.codeql-analysis.result }}` === 'success' &&
                            `${{ needs.secret-scanning.result }}` === 'success' &&
                            `${{ needs.security-headers-check.result }}` === 'success';
            
            const status = compliance ? '‚úÖ PASSED' : '‚ùå FAILED';
            const emoji = compliance ? 'üõ°Ô∏è' : '‚ö†Ô∏è';
            
            const comment = `${emoji} **Security Compliance Check: ${status}**
            
            | Check | Result |
            |-------|--------|
            | Dependency Vulnerabilities | ${{ needs.dependency-check.result }} |
            | CodeQL Analysis | ${{ needs.codeql-analysis.result }} |
            | Secret Scanning | ${{ needs.secret-scanning.result }} |
            | Security Headers | ${{ needs.security-headers-check.result }} |
            
            Please ensure all checks pass before merging.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });