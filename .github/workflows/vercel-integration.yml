name: Vercel Integration Setup

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - setup
          - test
          - list-secrets

jobs:
  vercel-setup:
    name: Vercel Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Check Vercel configuration
        if: github.event.inputs.action == 'setup' || github.event.inputs.action == 'test'
        run: |
          echo "üîç Checking Vercel configuration..."
          
          # Check if required secrets are set
          MISSING_SECRETS=""
          
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS VERCEL_TOKEN"
          fi
          
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS VERCEL_ORG_ID"
          fi
          
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS VERCEL_PROJECT_ID"
          fi
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "‚ùå Missing required secrets:$MISSING_SECRETS"
            echo ""
            echo "üìù Setup Instructions:"
            echo "1. Go to https://vercel.com/account/tokens and create a new token"
            echo "2. Add the token as VERCEL_TOKEN in GitHub Secrets"
            echo "3. Get your Org ID from: https://vercel.com/account"
            echo "4. Get your Project ID from your Vercel project settings"
            echo ""
            echo "5. Add these secrets in GitHub:"
            echo "   - Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "   - VERCEL_TOKEN: Your personal access token"
            echo "   - VERCEL_ORG_ID: Your organization/team ID"
            echo "   - VERCEL_PROJECT_ID: Your project ID"
            exit 1
          else
            echo "‚úÖ All required Vercel secrets are configured"
          fi

      - name: Test Vercel connection
        if: github.event.inputs.action == 'test'
        run: |
          echo "üîç Testing Vercel connection..."
          
          # Test API access
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" https://api.vercel.com/v2/user)
          
          if echo "$RESPONSE" | jq -e '.user' > /dev/null 2>&1; then
            USERNAME=$(echo "$RESPONSE" | jq -r '.user.username')
            echo "‚úÖ Successfully connected to Vercel as: $USERNAME"
          else
            echo "‚ùå Failed to connect to Vercel API"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          # Test project access
          PROJECT_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" "https://api.vercel.com/v9/projects/${{ secrets.VERCEL_PROJECT_ID }}?teamId=${{ secrets.VERCEL_ORG_ID }}")
          
          if echo "$PROJECT_RESPONSE" | jq -e '.name' > /dev/null 2>&1; then
            PROJECT_NAME=$(echo "$PROJECT_RESPONSE" | jq -r '.name')
            echo "‚úÖ Successfully accessed project: $PROJECT_NAME"
            
            # Save project name for other workflows
            echo "VERCEL_PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
            
            # Get recent deployments
            echo ""
            echo "üìã Recent deployments:"
            vercel list --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} | head -10
          else
            echo "‚ùå Failed to access Vercel project"
            echo "Response: $PROJECT_RESPONSE"
            exit 1
          fi

      - name: List required secrets
        if: github.event.inputs.action == 'list-secrets'
        run: |
          echo "üìã Required GitHub Secrets for CD Pipeline:"
          echo ""
          echo "### Vercel Secrets (Required):"
          echo "- VERCEL_TOKEN: Personal access token from https://vercel.com/account/tokens"
          echo "- VERCEL_ORG_ID: Organization ID from https://vercel.com/account"
          echo "- VERCEL_PROJECT_ID: Project ID from Vercel project settings"
          echo ""
          echo "### Notification Secrets (Optional):"
          echo "- SLACK_WEBHOOK_URL: Slack incoming webhook for notifications"
          echo "- DISCORD_WEBHOOK_URL: Discord webhook for notifications"
          echo ""
          echo "### Additional Configuration:"
          echo "1. Set up environments in GitHub:"
          echo "   - staging (auto-deploy)"
          echo "   - production (requires approval)"
          echo "   - production-approval (for manual gate)"
          echo "   - production-rollback (for emergency rollback)"
          echo ""
          echo "2. Configure branch protection rules:"
          echo "   - main: Require PR reviews, status checks"
          echo "   - develop: Require status checks"
          echo ""
          echo "3. Enable GitHub Environments:"
          echo "   - Go to Settings ‚Üí Environments"
          echo "   - Create 'production' with required reviewers"
          echo "   - Create 'staging' with auto-deploy"