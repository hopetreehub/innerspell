// Direct API test for AI interpretation
const https = require('https');

async function testAIInterpretationAPI() {
    console.log('üîç Testing AI Tarot Interpretation API directly...');
    console.log('üìÖ Test time:', new Date().toISOString());
    
    const testData = {
        question: "ÌÖåÏä§Ìä∏ ÏßàÎ¨∏: ÎÇòÏùò ÎØ∏ÎûòÎäî Ïñ¥ÎñªÍ≤å Îê†ÍπåÏöî? (Ìï¥ÏÑù Ïä§ÌÉÄÏùº: Ï†ÑÌÜµ RWS (ÎùºÏù¥Îçî-Ïõ®Ïù¥Ìä∏-Ïä§ÎØ∏Ïä§))",
        cardSpread: "3Ïπ¥Îìú (Í≥ºÍ±∞-ÌòÑÏû¨-ÎØ∏Îûò)",
        cardInterpretations: `1. The Fool (Í≥ºÍ±∞) (Ï†ïÎ∞©Ìñ•): ÏÉàÎ°úÏö¥ ÏãúÏûë, ÏàúÏàòÌï®, Î™®Ìóò...
2. The World (ÌòÑÏû¨) (Ïó≠Î∞©Ìñ•): ÎØ∏ÏôÑÏÑ±, ÏßÄÏó∞, Ï¢åÏ†à...
3. The Sun (ÎØ∏Îûò) (Ï†ïÎ∞©Ìñ•): ÏÑ±Í≥µ, ÌôúÎ†•, Í∏çÏ†ïÏ†Å ÏóêÎÑàÏßÄ...`,
        isGuestUser: false,
        spreadId: "past-present-future",
        styleId: "traditional-rws"
    };
    
    const options = {
        hostname: 'test-studio-firebase.vercel.app',
        path: '/api/debug/test-tarot',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(JSON.stringify(testData))
        }
    };
    
    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            console.log(`Status Code: ${res.statusCode}`);
            console.log(`Headers:`, res.headers);
            
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                console.log('\nüìä Response received:');
                console.log('Raw data length:', data.length);
                
                try {
                    const parsed = JSON.parse(data);
                    console.log('\n‚úÖ Parsed response:');
                    console.log(JSON.stringify(parsed, null, 2));
                    
                    if (parsed.success) {
                        console.log('\n‚úÖ SUCCESS: AI interpretation generated');
                        console.log('Interpretation length:', parsed.interpretation?.length || 0);
                    } else {
                        console.log('\n‚ùå FAILED:', parsed.error);
                    }
                } catch (error) {
                    console.log('\n‚ùå Failed to parse response:', error.message);
                    console.log('Raw response:', data.substring(0, 500));
                }
                
                resolve();
            });
        });
        
        req.on('error', (error) => {
            console.error('‚ùå Request error:', error);
            reject(error);
        });
        
        req.write(JSON.stringify(testData));
        req.end();
    });
}

// Run the test
testAIInterpretationAPI().catch(console.error);