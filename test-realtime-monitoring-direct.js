const { chromium } = require('playwright');

async function testRealtimeMonitoringDirect() {
  let browser;
  let page;
  
  try {
    browser = await chromium.launch({ headless: false });
    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 }
    });
    page = await context.newPage();
    
    // Step 1: Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÎ°ú Î∞îÎ°ú Ïù¥Îèô
    console.log('üë§ Navigating directly to admin page...');
    await page.goto('http://localhost:4000/admin');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000);
    
    // Step 2: Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÌÉ≠ ÌÅ¥Î¶≠
    console.log('üìà Clicking real-time monitoring tab...');
    const monitoringTab = await page.$('[role="tab"]:has-text("Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ")');
    if (monitoringTab) {
      await monitoringTab.click();
      await page.waitForTimeout(3000);
      
      // Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∫°Ï≤ò
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-1-initial.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot captured: realtime-monitoring-1-initial.png');
      
      // Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
      console.log('\nüìä Real-time Statistics:');
      
      // ÌôúÏÑ± ÏÇ¨Ïö©Ïûê
      const activeUsersElement = await page.$('text=ÌôúÏÑ± ÏÇ¨Ïö©Ïûê >> xpath=../.. >> .text-2xl');
      if (activeUsersElement) {
        const activeUsers = await activeUsersElement.textContent();
        console.log(`   - Active Users: ${activeUsers}`);
      }
      
      // ÌôúÏÑ± ÏÑ∏ÏÖò
      const activeSessionsElement = await page.$('text=ÌôúÏÑ± ÏÑ∏ÏÖò >> xpath=../.. >> .text-2xl');
      if (activeSessionsElement) {
        const activeSessions = await activeSessionsElement.textContent();
        console.log(`   - Active Sessions: ${activeSessions}`);
      }
      
      // Ïò§Îäò Î¶¨Îî©
      const todayReadingsElement = await page.$('text=Ïò§Îäò Î¶¨Îî© >> xpath=../.. >> .text-2xl');
      if (todayReadingsElement) {
        const todayReadings = await todayReadingsElement.textContent();
        console.log(`   - Today Readings: ${todayReadings}`);
      }
      
      // ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ
      const avgResponseElement = await page.$('text=ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ >> xpath=../.. >> .text-2xl');
      if (avgResponseElement) {
        const avgResponse = await avgResponseElement.textContent();
        console.log(`   - Average Response Time: ${avgResponse}`);
      }
      
      // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏
      const systemStatusBadge = await page.$('text=ÏãúÏä§ÌÖú');
      if (systemStatusBadge) {
        const systemStatus = await systemStatusBadge.textContent();
        console.log(`   - System Status: ${systemStatus}`);
      }
      
      // Mock Îç∞Ïù¥ÌÑ∞ Î∞∞ÏßÄ ÌôïÏù∏
      const mockDataBadge = await page.$('text=Mock Îç∞Ïù¥ÌÑ∞');
      if (mockDataBadge) {
        console.log('   - ‚ö†Ô∏è Mock data mode is active');
      }
      
      // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÌÖåÏä§Ìä∏
      console.log('\n‚è±Ô∏è Testing auto-refresh (waiting 6 seconds)...');
      await page.waitForTimeout(6000);
      
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-2-refreshed.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot captured: realtime-monitoring-2-refreshed.png');
      
      // ÏÉàÎ°úÍ≥†Ïπ® Í∞ÑÍ≤© Î≥ÄÍ≤Ω ÌÖåÏä§Ìä∏
      console.log('\n‚öôÔ∏è Testing refresh interval change...');
      const intervalSelect = await page.$('select');
      if (intervalSelect) {
        await intervalSelect.selectOption('1000'); // 1Ï¥àÎ°ú Î≥ÄÍ≤Ω
        console.log('   - Changed refresh interval to 1 second');
        await page.waitForTimeout(3000);
      }
      
      // ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® ÌÖåÏä§Ìä∏
      console.log('\nüîÑ Testing manual refresh...');
      const refreshButton = await page.$('button:has-text("ÏÉàÎ°úÍ≥†Ïπ®")');
      if (refreshButton) {
        await refreshButton.click();
        console.log('   - Manual refresh clicked');
        await page.waitForTimeout(2000);
      }
      
      // ÌôúÏÑ± ÏÑ∏ÏÖò Î™©Î°ù ÌôïÏù∏
      console.log('\nüìã Checking active sessions list...');
      const sessionsList = await page.$('text=ÌôúÏÑ± ÏÑ∏ÏÖò >> xpath=../.. >> text=ÌòÑÏû¨ ÌéòÏù¥ÏßÄ');
      if (sessionsList) {
        console.log('   - Active sessions list is visible');
        const sessionCount = await page.$$('text=ÌòÑÏû¨ ÌéòÏù¥ÏßÄ').then(els => els.length);
        console.log(`   - Found ${sessionCount} active sessions`);
      } else {
        const noSessionsText = await page.$('text=ÌòÑÏû¨ ÌôúÏÑ± ÏÑ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§');
        if (noSessionsText) {
          console.log('   - No active sessions currently');
        }
      }
      
      // Ïã§ÏãúÍ∞Ñ ÌôúÎèô Ïä§Ìä∏Î¶º ÌôïÏù∏
      console.log('\nüì° Checking real-time activity stream...');
      const activityStream = await page.$('text=Ïã§ÏãúÍ∞Ñ ÌôúÎèô Ïä§Ìä∏Î¶º');
      if (activityStream) {
        console.log('   - Activity stream section found');
        
        const connectionStatus = await page.$('text=Ïó∞Í≤∞Îê®');
        if (connectionStatus) {
          console.log('   - ‚úÖ Stream is connected');
        } else {
          console.log('   - ‚ùå Stream is disconnected');
        }
      }
      
      // ÏãúÏä§ÌÖú ÏÑ±Îä• ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïä§ÌÅ¨Î°§
      console.log('\nüìä Scrolling to system performance dashboard...');
      const performanceSection = await page.$('text=ÏãúÏä§ÌÖú ÏÑ±Îä• ÎåÄÏãúÎ≥¥Îìú');
      if (performanceSection) {
        await performanceSection.scrollIntoViewIfNeeded();
        await page.waitForTimeout(1000);
        
        // ÏÑ±Îä• Î©îÌä∏Î¶≠ ÌôïÏù∏
        const cpuUsage = await page.$('text=CPU ÏÇ¨Ïö©Î•† >> xpath=../.. >> text=%');
        if (cpuUsage) {
          const cpu = await cpuUsage.textContent();
          console.log(`   - CPU Usage: ${cpu}`);
        }
        
        const memoryUsage = await page.$('text=Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•† >> xpath=../.. >> text=%');
        if (memoryUsage) {
          const memory = await memoryUsage.textContent();
          console.log(`   - Memory Usage: ${memory}`);
        }
        
        await page.screenshot({ 
          path: 'screenshots/realtime-monitoring-3-performance.png',
          fullPage: true
        });
        console.log('üì∏ Screenshot captured: realtime-monitoring-3-performance.png');
      }
      
      // ÏïåÎ¶º ÏÑ§Ï†ï ÌÖåÏä§Ìä∏
      console.log('\nüîî Testing notification settings...');
      const alertButton = await page.$('button:has-text("ÏïåÎ¶º")');
      if (alertButton) {
        const alertText = await alertButton.textContent();
        console.log(`   - Current alert status: ${alertText}`);
        
        await alertButton.click();
        await page.waitForTimeout(1000);
        
        const newAlertText = await alertButton.textContent();
        console.log(`   - New alert status: ${newAlertText}`);
      }
      
      // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÌÜ†Í∏Ä ÌÖåÏä§Ìä∏
      console.log('\nüîÑ Testing auto-refresh toggle...');
      const autoRefreshButton = await page.$('button:has-text("ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®")');
      if (autoRefreshButton) {
        const refreshText = await autoRefreshButton.textContent();
        console.log(`   - Current auto-refresh: ${refreshText}`);
        
        await autoRefreshButton.click();
        await page.waitForTimeout(1000);
        
        const newRefreshText = await autoRefreshButton.textContent();
        console.log(`   - New auto-refresh: ${newRefreshText}`);
      }
      
      // ÏµúÏ¢Ö Ïä§ÌÅ¨Î¶∞ÏÉ∑
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-4-final.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot captured: realtime-monitoring-4-final.png');
    } else {
      console.log('‚ùå Real-time monitoring tab not found');
    }
    
    // Step 3: Îç∞Ïù¥ÌÑ∞ ÌååÏùº ÌôïÏù∏
    console.log('\nüìÅ Checking data files...');
    const fs = require('fs');
    const path = require('path');
    
    const dataDir = path.join(process.cwd(), 'data');
    if (fs.existsSync(dataDir)) {
      console.log('‚úÖ Data directory exists');
      
      const files = fs.readdirSync(dataDir);
      console.log(`   Found ${files.length} files:`);
      files.forEach(file => {
        const stats = fs.statSync(path.join(dataDir, file));
        console.log(`   - ${file} (${stats.size} bytes)`);
      });
    } else {
      console.log('‚ùå Data directory not found');
    }
    
    console.log('\n‚úÖ Real-time monitoring test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    
    if (page) {
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-error.png',
        fullPage: true
      });
      console.log('üì∏ Error screenshot captured');
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Run the test
testRealtimeMonitoringDirect();