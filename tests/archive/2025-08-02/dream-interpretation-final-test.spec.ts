import { test, expect } from '@playwright/test';

test.describe('Dream Interpretation Final Test', () => {
  test('Complete dream interpretation flow with timeout system', async ({ page }) => {
    console.log('üß™ Starting final dream interpretation test...');
    
    // Navigate to dream interpretation page
    await page.goto('https://test-studio-firebase.vercel.app/dream-interpretation');
    console.log('‚úÖ Navigated to dream interpretation page');
    
    // Take initial screenshot
    await page.screenshot({ 
      path: 'dream-interpretation-initial.png',
      fullPage: true 
    });
    
    // Enter dream description
    const dreamInput = page.locator('textarea[placeholder*="ÍøàÏùò ÎÇ¥Ïö©"]');
    await expect(dreamInput).toBeVisible();
    await dreamInput.fill('Ïñ¥Ï†ØÎ∞§ ÌïòÎäòÏùÑ ÎÇòÎäî ÍøàÏùÑ Íæ∏ÏóàÏäµÎãàÎã§');
    console.log('‚úÖ Entered dream description');
    
    // Take screenshot after entering dream
    await page.screenshot({ 
      path: 'dream-interpretation-entered.png',
      fullPage: true 
    });
    
    // Click next step button
    const nextButton = page.locator('button:has-text("Îã§Ïùå Îã®Í≥Ñ")');
    await expect(nextButton).toBeVisible();
    await nextButton.click();
    console.log('‚úÖ Clicked next step button');
    
    // Wait for either AI questions or fallback questions to appear
    console.log('‚è≥ Waiting for questions to appear (max 15 seconds)...');
    
    try {
      // Wait for loading to disappear and questions to appear
      await page.waitForSelector('.animate-spin', { state: 'detached', timeout: 15000 });
      console.log('‚úÖ Loading spinner disappeared');
    } catch (error) {
      console.log('‚ö†Ô∏è Loading spinner timeout - checking for fallback');
    }
    
    // Check if fallback questions appeared
    const fallbackQuestions = page.locator('div').filter({ hasText: 'ÍøàÏóêÏÑú ÎãπÏã†Ïùò Í∞êÏ†ïÏùÄ Ïñ¥Îñ†ÌñàÎÇòÏöî?' });
    const hasFallback = await fallbackQuestions.count() > 0;
    
    if (hasFallback) {
      console.log('‚úÖ Fallback questions appeared');
      
      // Take screenshot of fallback questions
      await page.screenshot({ 
        path: 'dream-interpretation-fallback-questions.png',
        fullPage: true 
      });
      
      // Answer fallback questions
      const emotionRadio = page.locator('input[value="Í∏∞Îª§Îã§"]');
      await emotionRadio.check();
      
      const objectRadio = page.locator('input[value="ÏÇ¨Îûå"]');
      await objectRadio.check();
      
      const settingRadio = page.locator('input[value="ÏûêÏó∞"]');
      await settingRadio.check();
      
      const actionRadio = page.locator('input[value="Îã¨Î¶¨Í∏∞/Í±∑Í∏∞"]');
      await actionRadio.check();
      
      console.log('‚úÖ Answered fallback questions');
      
      // Take screenshot after answering
      await page.screenshot({ 
        path: 'dream-interpretation-answered.png',
        fullPage: true 
      });
      
    } else {
      console.log('ü§ñ AI questions appeared instead of fallback');
      
      // Take screenshot of AI questions
      await page.screenshot({ 
        path: 'dream-interpretation-ai-questions.png',
        fullPage: true 
      });
      
      // Find and answer any visible questions
      const questionInputs = page.locator('input[type="text"], textarea');
      const count = await questionInputs.count();
      
      for (let i = 0; i < count; i++) {
        await questionInputs.nth(i).fill('ÎÑ§, Í∑∏Î†áÏäµÎãàÎã§.');
      }
      
      console.log(`‚úÖ Answered ${count} AI questions`);
    }
    
    // Click the interpretation button
    const interpretButton = page.locator('button:has-text("AI Íøà Ìï¥Î™Ω Î∞õÍ∏∞")');
    await expect(interpretButton).toBeVisible();
    await interpretButton.click();
    console.log('‚úÖ Clicked interpretation button');
    
    // Wait for interpretation result (max 20 seconds)
    console.log('‚è≥ Waiting for interpretation result (max 20 seconds)...');
    
    try {
      // Wait for loading to finish
      await page.waitForSelector('.animate-spin', { state: 'detached', timeout: 20000 });
      console.log('‚úÖ Interpretation loading finished');
    } catch (error) {
      console.log('‚ö†Ô∏è Interpretation loading timeout - checking for fallback');
    }
    
    // Check for interpretation result
    const interpretationText = page.locator('div').filter({ hasText: /Íøà Ìï¥Î™Ω|Ìï¥ÏÑù|ÏùòÎØ∏/ }).first();
    
    try {
      await expect(interpretationText).toBeVisible({ timeout: 5000 });
      console.log('‚úÖ Interpretation result appeared');
      
      // Take final screenshot
      await page.screenshot({ 
        path: 'dream-interpretation-final-result.png',
        fullPage: true 
      });
      
      // Get the interpretation content
      const content = await interpretationText.textContent();
      console.log('üìñ Interpretation content preview:', content?.substring(0, 100) + '...');
      
    } catch (error) {
      console.log('‚ùå No interpretation result found');
      
      // Take error screenshot
      await page.screenshot({ 
        path: 'dream-interpretation-error.png',
        fullPage: true 
      });
    }
    
    // Wait a bit more to see final state
    await page.waitForTimeout(3000);
    
    // Take comprehensive final screenshot
    await page.screenshot({ 
      path: 'dream-interpretation-complete-flow.png',
      fullPage: true 
    });
    
    console.log('üéØ Dream interpretation test completed');
  });
});