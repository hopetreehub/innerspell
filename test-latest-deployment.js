const { chromium } = require('playwright');

async function testLatestDeployment() {
    console.log('üîç Testing Latest Successful Deployment...');
    
    const browser = await chromium.launch({ 
        headless: false,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const context = await browser.newContext({
        viewport: { width: 1280, height: 720 }
    });
    
    const page = await context.newPage();
    
    // ÏΩòÏÜî ÏóêÎü¨ Î™®ÎãàÌÑ∞ÎßÅ
    const errors = [];
    const getActiveAIModelsErrors = [];
    
    page.on('console', msg => {
        const text = msg.text();
        if (msg.type() === 'error') {
            console.log('‚ùå Console Error:', text);
            errors.push(text);
            
            // getActiveAIModels Í¥ÄÎ†® ÏóêÎü¨ ÌäπÎ≥Ñ Ï∂îÏ†Å
            if (text.includes('getActiveAIModels')) {
                console.log('üéØ FOUND getActiveAIModels ERROR:', text);
                getActiveAIModelsErrors.push(text);
            }
        }
    });
    
    page.on('pageerror', error => {
        const message = error.message;
        console.log('üí• Page Error:', message);
        errors.push(`Page Error: ${message}`);
        
        if (message.includes('getActiveAIModels')) {
            console.log('üéØ FOUND getActiveAIModels PAGE ERROR:', message);
            getActiveAIModelsErrors.push(message);
        }
    });
    
    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨ Î™®ÎãàÌÑ∞ÎßÅ
    page.on('response', response => {
        if (response.status() >= 400) {
            const error = `Network Error: ${response.status()} ${response.url()}`;
            console.log('üåê', error);
            errors.push(error);
        }
    });
    
    try {
        // ÏµúÍ∑º ÏÑ±Í≥µÌïú Î∞∞Ìè¨ URL ÏÇ¨Ïö©
        const deploymentUrl = 'https://test-studio-firebase-dqvy87e81-johns-projects-bf5e60f3.vercel.app';
        
        console.log('1Ô∏è‚É£ Loading deployment:', deploymentUrl);
        await page.goto(deploymentUrl, { 
            waitUntil: 'domcontentloaded',
            timeout: 30000 
        });
        
        await page.waitForTimeout(3000);
        await page.screenshot({ path: 'deploy-01-main.png' });
        
        const title = await page.title();
        console.log('Page title:', title);
        console.log('Current URL:', page.url());
        
        // ÌÉÄÎ°ú ÏùΩÍ∏∞ Ï∞æÍ∏∞ Î∞è ÌÅ¥Î¶≠
        console.log('2Ô∏è‚É£ Looking for tarot reading link...');
        
        // Îã§ÏñëÌïú Î∞©Î≤ïÏúºÎ°ú ÌÉÄÎ°ú ÎßÅÌÅ¨ Ï∞æÍ∏∞
        let tarotFound = false;
        
        // Î∞©Î≤ï 1: ÌÖçÏä§Ìä∏Î°ú Ï∞æÍ∏∞
        const tarotByText = page.locator('a:has-text("ÌÉÄÎ°ú")');
        if (await tarotByText.count() > 0) {
            console.log('Found tarot link by text');
            await tarotByText.first().click();
            tarotFound = true;
        } else {
            // Î∞©Î≤ï 2: hrefÎ°ú Ï∞æÍ∏∞
            const tarotByHref = page.locator('a[href*="reading"]');
            if (await tarotByHref.count() > 0) {
                console.log('Found tarot link by href');
                await tarotByHref.first().click();
                tarotFound = true;
            } else {
                // Î∞©Î≤ï 3: Î™®Îì† ÎßÅÌÅ¨ ÌôïÏù∏
                console.log('Checking all available links...');
                const allLinks = await page.locator('a').all();
                for (let i = 0; i < Math.min(allLinks.length, 10); i++) {
                    const text = await allLinks[i].textContent();
                    const href = await allLinks[i].getAttribute('href');
                    console.log(`Link ${i}: "${text}" -> ${href}`);
                    
                    if (text && (text.includes('ÌÉÄÎ°ú') || text.includes('ÏùΩÍ∏∞') || text.includes('reading'))) {
                        console.log('Found tarot link:', text);
                        await allLinks[i].click();
                        tarotFound = true;
                        break;
                    }
                }
            }
        }
        
        if (tarotFound) {
            await page.waitForTimeout(3000);
            await page.screenshot({ path: 'deploy-02-tarot-page.png' });
            
            // AI Ìï¥ÏÑù Î≤ÑÌäº Ï∞æÍ∏∞
            console.log('3Ô∏è‚É£ Looking for AI interpretation...');
            
            const aiButton = page.locator('button:has-text("AI")');
            if (await aiButton.count() > 0) {
                console.log('Found AI button, clicking...');
                await aiButton.click();
                await page.waitForTimeout(5000);
                await page.screenshot({ path: 'deploy-03-ai-clicked.png' });
            } else {
                console.log('No AI button found, checking available buttons...');
                const buttons = await page.locator('button').all();
                for (let i = 0; i < Math.min(buttons.length, 5); i++) {
                    const text = await buttons[i].textContent();
                    console.log(`Button ${i}: "${text}"`);
                }
            }
        } else {
            console.log('No tarot link found');
        }
        
        // ÏµúÏ¢Ö ÎåÄÍ∏∞ Î∞è ÏóêÎü¨ ÏàòÏßë
        await page.waitForTimeout(5000);
        await page.screenshot({ path: 'deploy-04-final.png' });
        
        console.log('\nüìä Deployment Test Results:');
        console.log('Total errors found:', errors.length);
        errors.forEach((error, index) => {
            console.log(`${index + 1}. ${error}`);
        });
        
        console.log('\nüéØ getActiveAIModels Errors:', getActiveAIModelsErrors.length);
        if (getActiveAIModelsErrors.length > 0) {
            console.log('‚ùå CRITICAL: getActiveAIModels errors still exist!');
            getActiveAIModelsErrors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        } else {
            console.log('‚úÖ No getActiveAIModels errors found!');
        }
        
    } catch (error) {
        console.log('üí• Test Error:', error.message);
        await page.screenshot({ path: 'deploy-error.png' });
    } finally {
        await browser.close();
    }
    
    return { totalErrors: errors.length, getActiveAIModelsErrors };
}

testLatestDeployment().catch(console.error);