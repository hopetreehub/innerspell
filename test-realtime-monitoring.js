const { chromium } = require('playwright');

async function testRealtimeMonitoring() {
  let browser;
  let page;
  
  try {
    browser = await chromium.launch({ headless: false });
    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 }
    });
    page = await context.newPage();
    
    // Step 1: ÌôàÌéòÏù¥ÏßÄÏóêÏÑú ÏãúÏûë
    console.log('üåê Navigating to homepage...');
    await page.goto('http://localhost:4000');
    await page.waitForLoadState('networkidle');
    
    // Step 2: ÌÉÄÎ°ú Î¶¨Îî© ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    console.log('üé¥ Navigating to tarot reading page...');
    await page.click('text=ÌÉÄÎ°ú ÏùΩÍ∏∞ ÏãúÏûë');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000);
    
    // Step 3: ÌÉÄÎ°ú Î¶¨Îî© ÏàòÌñâ (ÏÇ¨Ïö©Ïûê ÌôúÎèô Í∏∞Î°ù)
    console.log('üìù Performing tarot reading...');
    const questionTextarea = await page.$('textarea');
    if (questionTextarea) {
      await questionTextarea.fill('Ïò§ÎäòÏùò Ïö¥ÏÑ∏Îäî Ïñ¥Îñ®ÍπåÏöî?');
      
      // Ïπ¥Îìú ÏÑ†ÌÉù
      const cards = await page.$$('img[alt*="Ïπ¥Îìú"]');
      if (cards.length > 0) {
        console.log(`Found ${cards.length} cards to select`);
        for (let i = 0; i < Math.min(3, cards.length); i++) {
          await cards[i].click();
          await page.waitForTimeout(500);
        }
      }
      
      // AI Ìï¥ÏÑù ÏöîÏ≤≠
      const interpretButton = await page.$('button:has-text("AI Ìï¥ÏÑù"), button:has-text("Ìï¥ÏÑù ÏöîÏ≤≠")');
      if (interpretButton) {
        await interpretButton.click();
        console.log('‚úÖ Tarot reading activity recorded!');
        await page.waitForTimeout(3000);
      }
    }
    
    // Step 4: Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    console.log('üë§ Navigating to admin page...');
    await page.goto('http://localhost:4000/admin');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000);
    
    // Step 5: Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÌÉ≠ ÌÅ¥Î¶≠
    console.log('üìà Clicking real-time monitoring tab...');
    const monitoringTab = await page.$('[role="tab"]:has-text("Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ")');
    if (monitoringTab) {
      await monitoringTab.click();
      await page.waitForTimeout(3000);
      
      // Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∫°Ï≤ò
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-1-initial.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot captured: realtime-monitoring-1-initial.png');
      
      // Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
      const activeUsersText = await page.textContent('text=ÌôúÏÑ± ÏÇ¨Ïö©Ïûê');
      const activeSessionsText = await page.textContent('text=ÌôúÏÑ± ÏÑ∏ÏÖò');
      const todayReadingsText = await page.textContent('text=Ïò§Îäò Î¶¨Îî©');
      
      console.log('\nüìä Real-time Statistics:');
      console.log(`   - ${activeUsersText}`);
      console.log(`   - ${activeSessionsText}`);
      console.log(`   - ${todayReadingsText}`);
      
      // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÌÖåÏä§Ìä∏
      console.log('\n‚è±Ô∏è Testing auto-refresh...');
      await page.waitForTimeout(6000); // 5Ï¥à ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÎåÄÍ∏∞
      
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-2-refreshed.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot captured: realtime-monitoring-2-refreshed.png');
      
      // ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº ÌÅ¥Î¶≠
      console.log('üîÑ Clicking manual refresh...');
      const refreshButton = await page.$('button:has-text("ÏÉàÎ°úÍ≥†Ïπ®")');
      if (refreshButton) {
        await refreshButton.click();
        await page.waitForTimeout(2000);
      }
      
      // ÏãúÏä§ÌÖú ÏÑ±Îä• ÎåÄÏãúÎ≥¥Îìú ÌôïÏù∏
      const performanceSection = await page.$('text=ÏãúÏä§ÌÖú ÏÑ±Îä• ÎåÄÏãúÎ≥¥Îìú');
      if (performanceSection) {
        console.log('‚úÖ System performance dashboard found');
        await performanceSection.scrollIntoViewIfNeeded();
        await page.waitForTimeout(1000);
        
        await page.screenshot({ 
          path: 'screenshots/realtime-monitoring-3-performance.png',
          fullPage: true
        });
        console.log('üì∏ Screenshot captured: realtime-monitoring-3-performance.png');
      }
    }
    
    // Step 6: ÏÇ¨Ïö©ÌÜµÍ≥Ñ ÌÉ≠ÏúºÎ°ú Ï†ÑÌôò
    console.log('\nüìä Switching to usage stats tab...');
    const usageStatsTab = await page.$('[role="tab"]:has-text("ÏÇ¨Ïö©ÌÜµÍ≥Ñ")');
    if (usageStatsTab) {
      await usageStatsTab.click();
      await page.waitForTimeout(2000);
      
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-4-usage-stats.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot captured: realtime-monitoring-4-usage-stats.png');
    }
    
    // Step 7: Îç∞Ïù¥ÌÑ∞ ÌååÏùº ÌôïÏù∏
    console.log('\nüìÅ Checking data files...');
    const fs = require('fs');
    const path = require('path');
    
    // ÏÇ¨Ïö© ÌÜµÍ≥Ñ ÌååÏùº ÌôïÏù∏
    const statsPath = path.join(process.cwd(), 'data', 'usage-stats.json');
    if (fs.existsSync(statsPath)) {
      const statsData = JSON.parse(fs.readFileSync(statsPath, 'utf-8'));
      console.log('‚úÖ Usage stats file exists!');
      console.log(`   Total Users: ${statsData.stats.totalUsers}`);
      console.log(`   Active Users: ${statsData.stats.activeUsers}`);
      console.log(`   Total Readings: ${statsData.stats.totalReadings}`);
      console.log(`   Last Updated: ${statsData.lastUpdated}`);
    }
    
    // ÏÇ¨Ïö©Ïûê ÌôúÎèô ÌååÏùº ÌôïÏù∏
    const activitiesPath = path.join(process.cwd(), 'data', 'user-activities.json');
    if (fs.existsSync(activitiesPath)) {
      const activitiesData = JSON.parse(fs.readFileSync(activitiesPath, 'utf-8'));
      console.log('\n‚úÖ User activities file exists!');
      console.log(`   Total Activities: ${activitiesData.activities.length}`);
      
      if (activitiesData.activities.length > 0) {
        console.log('\n   Recent Activities:');
        activitiesData.activities.slice(0, 5).forEach(activity => {
          console.log(`   - ${activity.action} by ${activity.userId} at ${activity.timestamp}`);
        });
      }
    }
    
    console.log('\n‚úÖ Real-time monitoring test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    
    if (page) {
      await page.screenshot({ 
        path: 'screenshots/realtime-monitoring-error.png',
        fullPage: true
      });
      console.log('üì∏ Error screenshot captured');
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Run the test
testRealtimeMonitoring();